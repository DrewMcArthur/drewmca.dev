---
import InvalidSectionTranscript from "./transcripts/InvalidSectionTranscript.astro";
import Transcript1 from "./transcripts/Transcript1.astro";
import Transcript9 from "./transcripts/Transcript9.astro";

export type Section = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
const section = Astro.props.section as Section;

const audioFilesBySection: Record<Section, string> = {
  "1": "/audio/tour.mp3",
  "2": "/audio/tour.mp3",
  "3": "/audio/tour.mp3",
  "4": "/audio/tour.mp3",
  "5": "/audio/tour.mp3",
  "6": "/audio/tour.mp3",
  "7": "/audio/tour.mp3",
  "8": "/audio/tour.mp3",
  "9": "/audio/tour.mp3",
};
const scrollOffsetsBySection: Record<
  Section,
  Record<"start" | "total", string>
> = {
  "1": {
    start: "0",
    total: "0",
  },
  "2": {
    start: "0",
    total: "0",
  },
  "3": {
    start: "0",
    total: "0",
  },
  "4": {
    start: "0",
    total: "0",
  },
  "5": {
    start: "0",
    total: "0",
  },
  "6": {
    start: "0",
    total: "0",
  },
  "7": {
    start: "0",
    total: "0",
  },
  "8": {
    start: "0",
    total: "0",
  },
  "9": {
    start: "20",
    total: "55",
  },
};

const audioSourceFile: string = audioFilesBySection[section];
const scrollStartOffset = scrollOffsetsBySection[section]?.start;
const scrollTotalOffset = scrollOffsetsBySection[section]?.total;
---

<meta name="section" content={section} />
<meta name="scrollStartOffset" content={scrollStartOffset} />
<meta name="scrollTotalOffset" content={scrollTotalOffset} />

<audio controls id="audio-player">
  <source id="audio-source" src={audioSourceFile} type="audio/mp3" />
</audio>
<h4 class="transcript-title">Transcript</h4>
<div id="transcript">
  {
    section == "1" ? (
      <Transcript1 />
    ) : section == "9" ? (
      <Transcript9 />
    ) : (
      <InvalidSectionTranscript />
    )
  }
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const scrollStartOffset = document.querySelector<HTMLMetaElement>(
      'meta[name="scrollStartOffset"]'
    )!.content as unknown as number;
    const scrollTotalOffset = document.querySelector<HTMLMetaElement>(
      'meta[name="scrollTotalOffset"]'
    )!.content as unknown as number;

    const audio = document.querySelector("audio")!;
    const transcriptDiv = document.querySelector("#transcript")!;

    const scrollHeight =
      transcriptDiv.scrollHeight - transcriptDiv.clientHeight;
    let interval: number;

    function updateScrollPosition() {
      const proportionPlayed =
        (audio.currentTime - scrollStartOffset) /
        (audio.duration - scrollTotalOffset);
      transcriptDiv.scrollTop = proportionPlayed * scrollHeight;
    }

    audio.addEventListener("play", function () {
      updateScrollPosition(); // Initialize scroll position

      interval = setInterval(updateScrollPosition, 300); // Update every 50ms for smoother scrolling
    });

    // Stop scrolling when audio is paused or ended
    audio.addEventListener("pause", function () {
      clearInterval(interval);
    });

    audio.addEventListener("ended", function () {
      clearInterval(interval);
    });

    audio.addEventListener("seeked", updateScrollPosition); // Update scroll when user seeks in audio
  });
</script>
